#include <cxxtest/TestSuite.h>

#include <cstdlib>
#include <string>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atomspace/Handle.h>
#include <opencog/spacetime/atom_types.h>
#include <opencog/spatial/3DSpaceMap/Block3DMapUtil.h>
#include <opencog/spatial/3DSpaceMap/EntityRecorder.h>

#include <opencog/util/Logger.h>

using namespace std;
using namespace opencog;
using namespace opencog::spatial;

bool entityIsSelf = true;
bool entityIsAvatar = true;
class EntityRecorderUTest : public CxxTest::TestSuite
{ 

public:
    EntityRecorder* testEntityRecorder;
    AtomSpace as;

    void setUp()
    {
        testEntityRecorder = new EntityRecorder();
    }
    void tearDown()
    {
        delete testEntityRecorder;
        testEntityRecorder = NULL;
        as.clear();
    }

    void testAddandRemoveNoneBlockEntity_NormalEntity_AllGetFunctionsWork()
    {
        BlockVector testpos1(17, 28, 39);
        unsigned long timestamp1 = 12345;
        Handle testHandle1 = as.add_node(ENTITY_NODE, "entity");
        testEntityRecorder->addNoneBlockEntity(testHandle1, testpos1,
                                    !entityIsSelf, !entityIsAvatar, 
                                    timestamp1);

        Handle testHandle2 = testEntityRecorder->getEntity(testpos1);
        TS_ASSERT(testHandle1 == testHandle2);
        TS_ASSERT(testEntityRecorder->getLastAppearedLocation(testHandle1) == testpos1);
        testEntityRecorder->removeNoneBlockEntity(testHandle1);
		
        TS_ASSERT(testEntityRecorder->getEntity(testpos1) == Handle::UNDEFINED);
        //preserve record
        TS_ASSERT(testEntityRecorder->getLastAppearedLocation(testHandle1) == testpos1);
    }

    void testUpdateEntityLocation_MultipleLocation_LastLocationIsPos2()
    {
        BlockVector testpos1(17, 28, 39);
        unsigned long timestamp1 = 12345;
        Handle testHandle1 = as.add_node(ENTITY_NODE, "entity");
        testEntityRecorder->addNoneBlockEntity(testHandle1, testpos1,
                                    !entityIsSelf, !entityIsAvatar, 
                                    timestamp1);
        BlockVector testpos2(17, 28, 40);
        unsigned long timestamp2 = 12346;
        testEntityRecorder->updateNoneBlockEntityLocation(testHandle1, testpos2, timestamp2);
        BlockVector lastLocation = testEntityRecorder->getLastAppearedLocation(testHandle1);

        TS_ASSERT_EQUALS(testpos2, lastLocation);
    }

    void testAddEntity_PressureTest()
    {
        int count = 10000;
        while(count != 0)
        {
            char countstr[256];
            sprintf(countstr, "%d", count);
            count --;
            BlockVector testpos1(count, count, count);
            Handle testHandle1 = as.add_node(ENTITY_NODE, countstr);
            testEntityRecorder->addNoneBlockEntity(testHandle1, testpos1,
                                        !entityIsSelf, !entityIsAvatar, 12345678892);
            Handle testHandle2 = testEntityRecorder->getEntity(testpos1);
            TS_ASSERT(testHandle1 == testHandle2);
            TS_ASSERT(testEntityRecorder->getLastAppearedLocation(testHandle1) == testpos1);
            testEntityRecorder->removeNoneBlockEntity(testHandle1);
			
            TS_ASSERT(testEntityRecorder->getEntity(testpos1) == Handle::UNDEFINED);
            //preserve record
            TS_ASSERT(testEntityRecorder->getLastAppearedLocation(testHandle1) == testpos1);	
        }
    }

};
