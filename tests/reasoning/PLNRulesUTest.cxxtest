/*
 * tests/rule-engine/PLNRulesUTest.cxxtest
 *
 * Copyright (C) 2014 Cosmo Harrigan
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class PLNRulesUTest: public CxxTest::TestSuite
{
private:
        AtomSpace as;
        SchemeEval eval;

public:
	PLNRulesUTest() : eval(&as)
    {
        logger().setLevel(Logger::DEBUG);
        logger().setPrintToStdoutFlag(true);
    }

    ~PLNRulesUTest()
    {
        // Erase the log file if no assertions failed.
        if (!CxxTest::TestTracker::tracker().suiteFailed())
                std::remove(logger().getFilename().c_str());
    }

    void setUp();
    void tearDown();

    void test_deduction();
    void test_and();
    void test_not();
};

void PLNRulesUTest::tearDown()
{
}

void PLNRulesUTest::setUp()
{
    config().set("SCM_PRELOAD",
        "opencog/atomspace/core_types.scm, "
        "opencog/scm/utilities.scm, "
        "opencog/scm/av-tv.scm, "
        "opencog/scm/opencog/query.scm");

    load_scm_files_from_config(as);
}

/*
 * Tests the deduction rule (pln-rule-deduction) defined in:
 * opencog/reasoning/pln/rules/deduction.scm
 */
void PLNRulesUTest::test_deduction()
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);
    
    eval.eval("(use-modules (opencog))");
    eval.eval("(use-modules (opencog query))");
    config().set("SCM_PRELOAD",
                 "opencog/scm/core_types.scm, "
                 "opencog/scm/utilities.scm, "
                 "tests/reasoning/simple-assertions.scm, "
                 "opencog/reasoning/pln/rules/deduction.scm");
    load_scm_files_from_config(as);
    
    Handle results;
    
    // To start with, it should only know that men are humans
    results = eval.eval_h("(cog-bind find-humans)");
    TS_ASSERT_EQUALS(1, as.get_arity(results));
    
    // Apply the deduction rule
    eval.eval_h("(cog-bind pln-rule-deduction)");
       
    // After applying the deduction rule, it should know that all 3 of the
    // instances of men are also humans (Socrates, Einstein, and Peirce)
    results = eval.eval_h("(cog-bind find-humans)");
    TS_ASSERT_EQUALS(4, as.get_arity(results));
}

/*
 * Tests the and rule (pln-rule-and) defined in:
 * opencog/reasoning/pln/rules/and.scm
 */
void PLNRulesUTest::test_and()
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);
    
    config().set("SCM_PRELOAD",
                 "opencog/scm/core_types.scm, "
                 "opencog/scm/utilities.scm, "
                 "tests/reasoning/simple-predicates.scm, "
                 "reasoning/pln/rules/and.scm");
    load_scm_files_from_config(as);

    // Apply the and rule
    Handle results = eval.eval_h("(cog-bind-af pln-rule-and)");

    // It should contain 4 groundings, (A, A), (A, B), (B, A), (B, B)
    TS_ASSERT_EQUALS(4, as.get_arity(results));
}

/*
 * Tests the not rule (pln-rule-not) defined in:
 * opencog/reasoning/pln/rules/not.scm
 */
void PLNRulesUTest::test_not()
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);
    
    config().set("SCM_PRELOAD",
                 "tests/reasoning/simple-predicates.scm, "
                 "reasoning/pln/rules/not.scm");
    load_scm_files_from_config(as);

    // Apply the and rule
    Handle results = eval.eval_h("(cog-bind-af pln-rule-not)");

    // It should contain 2 groundings, not(A), not(B)
    TS_ASSERT_EQUALS(2, as.get_arity(results));
}
